- name: Ensure registry token is set
  assert:
    that: container_registry_credentials[_registry].api_token is defined
  no_log: true

- name: Set API base
  when: remove_registry_tag_api_url is not defined
  set_fact:
    remove_registry_tag_api_url: 'https://{{ _registry }}/api/v1'

- name: Delete single tag
  when: remove_registry_tag_tag is defined
  set_fact:
    _to_delete:
      - '{{ remove_registry_tag_tag }}'

- name: Iterate old tags
  when: remove_registry_tag_tag is not defined
  block:
    - name: Setup vars
      set_fact:
        _to_delete: []

    - name: Get project tags
      uri:
        url: '{{ remove_registry_tag_api_url }}/repository/{{ _repopath }}/tag/'
        status_code: 200
      register: _tags

    - name: Build list of old tags
      loop: "{{ _tags.json.tags }}"
      loop_control:
        loop_var: zj_quay_tag
      set_fact:
        _to_delete: '{{ _to_delete|default([]) + [zj_quay_tag] }}'
      when:
        - zj_quay_tag.name is regex(remove_registry_tag_regex)
        # "last_modified": "Thu, 23 Mar 2023 21:59:40 -0000"
        - (now() - (zj_quay_tag.last_modified | to_datetime('%a, %d %b %Y %H:%M:%S -0000'))).seconds > remove_registry_tag_age

- name: List tags to remove
  debug:
    var: _to_delete

- name: Delete tag
  no_log: true
  uri:
    url: '{{ remove_registry_tag_api_url }}/repository/{{ _repopath }}/tag/{{ zj_quay_tag }}'
    method: DELETE
    status_code: [200, 204]
    headers:
      'Authorization': 'Bearer {{ container_registry_credentials[_registry].api_token }}'
  loop: '{{ _to_delete }}'
  loop_control:
    loop_var: zj_quay_tag
